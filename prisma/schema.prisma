// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  password            String?
  firstName           String
  lastName            String
  createdAt           DateTime        @default(now())
  lastLogin           DateTime?       @default(now())
  googleId            String?
  cellphoneNumber     String?
  movimientoStockUser StockMovement[] @relation("user")
}

model Category {
  id          Int       @id @default(autoincrement())
  description String    @unique
  products    Product[]
}

model Product {
  id                  Int                   @id @default(autoincrement())
  description         String                @unique
  sellPrice           Float?
  createdAt           DateTime              @default(now())
  barCode             String?               @unique
  categoryId          Int
  category            Category?             @relation(fields: [categoryId], references: [id])
  warehouseDetails    WarehouseDetail[]
  stockMovementDetail StockMovementDetail[]
}

model Warehouse {
  id               Int               @id @default(autoincrement())
  description      String            @unique
  warehouseDetails WarehouseDetail[]
  warehouseDestiny StockMovement[]   @relation("warehouseDestiny")
  warehouseOrigin  StockMovement[]   @relation("warehouseOrigin")
}

enum StockMovementType {
  BUY
  MOVEMENT
  SELL
  APLICATION
}

model StockMovement {
  id                  Int                   @id @default(autoincrement())
  description         String
  movementType        StockMovementType
  value               Float
  createdAt           DateTime              @default(now())
  voucherDescription  String?
  user                User?                 @relation("user", fields: [userId], references: [id])
  userId              String?
  warehouseDestiny    Warehouse?            @relation("warehouseDestiny", fields: [warehouseDestinyId], references: [id])
  warehouseDestinyId  Int?
  warehouseOrigin     Warehouse?            @relation("warehouseOrigin", fields: [warehouseOriginId], references: [id])
  warehouseOriginId   Int?
  stockMovementDetail StockMovementDetail[] @relation("stockMovementDetail")
  batch               Batch?                @relation("batch", fields: [batchId], references: [id])
  batchId             Int?
  aplicator           Aplicator?            @relation("aplicator", fields: [aplicatorId], references: [id])
  aplicatorId         Int?
  wasFactured         Boolean
  factureLink         String?
}

model StockParameters {
  id              Int @id @default(autoincrement())
  maxSellAmount   Int
  dailySellAmount Int
}

model WarehouseDetail {
  id          Int       @id @default(autoincrement())
  productId   Int
  warehouseId Int
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  quantity    Float
  sellPrice   Float
  lastUpdate  DateTime  @default(now())
}

model StockMovementDetail {
  id              Int           @id @default(autoincrement())
  productId       Int
  stockMovementId Int
  product         Product       @relation(fields: [productId], references: [id])
  stockMovement   StockMovement @relation("stockMovementDetail", fields: [stockMovementId], references: [id])
  quantity        Float
  sellPrice       Float?
}

model Batch {
  id            Int             @id @default(autoincrement())
  description   String
  hectares      Float
  fieldId       Int
  field         Field           @relation(fields: [fieldId], references: [id])
  stockMovement StockMovement[] @relation("batch")
}

model Field {
  id          Int     @id @default(autoincrement())
  description String
  hectares    Float
  batches     Batch[]
}

model Aplicator {
  id            Int             @id @default(autoincrement())
  description   String
  stockMovement StockMovement[] @relation("aplicator")
}
